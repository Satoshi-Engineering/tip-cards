# these variables are only used for the integration test postgres service
variables:
  POSTGRES_DB: tipcards
  POSTGRES_USER: tipcards
  POSTGRES_PASSWORD: thisisonlyusedinthepipeline

test-integration-backend:
  services:
    - name: postgres:16.3
      alias: postgres
  stage: backend-integration
  rules:
    - !reference [.shared_config, rules, web_and_push_and_schedule]
    - !reference [.shared_config, rules, nightly_integration]
    - when: on_success
  cache:
    - !reference [.shared_config, cache, node_modules]
  variables:
    NODE_ENV: test
  script:
    - |
      if [ "$CI_COMMIT_BRANCH" == "main" -a -f "$BACKEND_ENV_FILE_TEST_MAIN" ]
      then 
        echo "Running on main branch"
        cp $BACKEND_ENV_FILE_TEST_MAIN backend/.env.integrationTest
      elif [ -f "$BACKEND_ENV_FILE_TEST_DEVELOP" ]
      then
        echo "Running on develop branch"
        cp $BACKEND_ENV_FILE_TEST_DEVELOP backend/.env.integrationTest
      else
        echo "Running on feature branch"
        cp $BACKEND_ENV_FILE_TEST_FEATURE backend/.env.integrationTest
      fi
    - echo "Running database migration to prepare database for integration tests"
    - npm run drizzle-migrate -- --envIntegrationTest
    - echo "Running backend integration test on branch $CI_COMMIT_BRANCH"
    - sh backend-integration-tests.sh

# when: always
# This job will run even if the previous stages fail.
# This runs as it tests the live environment, which should be available even if the previous stages fail.
test-integration-frontend:
  stage: frontend-integration
  rules:
    - !reference [.shared_config, rules, web_and_push_and_schedule]
    - !reference [.shared_config, rules, nightly_integration]
    - !reference [.shared_config, rules, deployable_branches]
    - when: always # even run when previous stages fail
  services:
    - name: seleniarm/standalone-chromium:120.0
      alias: selenium-chrome
  cache:
    - !reference [.shared_config, cache, node_modules]
  variables:
    NODE_ENV: test
  script:
    - |
      if [ "$CI_COMMIT_BRANCH" == "main" ]
      then 
        echo "Running on main branch"
        echo "TEST_ORIGIN=$FRONTEND_TEST_ORIGIN_MAIN" > frontend/.env.test.local
      elif [ "$CI_COMMIT_BRANCH" == "develop" ]
      then
        echo "Running on develop branch"
        echo "TEST_ORIGIN=$FRONTEND_TEST_ORIGIN_DEVELOP" > frontend/.env.test.local
      else
        echo "ERROR: this branch $CI_COMMIT_BRANCH is not allowed to run this job! Wake up your devops team!"
        exit 1
      fi
    - echo "Running frontend intergration test on branch $CI_COMMIT_BRANCH with url $TEST_ORIGIN"
    - npm run frontend-test-integration -- --maxWorkers=2
